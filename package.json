{
  "name": "@decaf-ts/for-fabric",
  "version": "0.0.1",
  "description": "template for ts projects",
  "type": "module",
  "exports": {
    "./client": {
      "require": "./lib/client/index.cjs",
      "import": "./lib/esm/client/index.js"
    },
    "./contracts": {
      "require": "./lib/contracts/index.cjs",
      "import": "./lib/esm/contracts/index.js"
    },
    "./shared": {
      "require": "./lib/shared/index.cjs",
      "import": "./lib/esm/shared/index.js"
    }
  },
  "types": "lib/index.d.ts",
  "typesVersions": {
    "*": {
      "client": [
        "./lib/esm/client/index.d.ts"
      ],
      "contracts": [
        "./lib/esm/contracts/index.d.ts"
      ],
      "shared": [
        "./lib/esm/shared/index.d.ts"
      ],
      "*": [
        "./lib/index.d.ts"
      ]
    }
  },
  "scripts": {
    "do-install": "NPM_TOKEN=$(cat .npmtoken) npm install",
    "update-dependencies": "PREFIX=\"decaf-ts\"; npm ls | grep \"$PREFIX\" | awk -F/ '{print $NF}' | sed 's/@.*//' | xargs -I package npm update @\"$PREFIX\"/package",
    "update-scripts": "npx update-scripts",
    "on-first-run": "npx update-scripts --boot",
    "set-git-auth": "git config url.\"https://api:$(cat .token)@github.com/\".insteadOf \"https://github.com/\" && git config url.\"https://ssh:$(cat .token)@github.com/\".insteadOf \"ssh://git@github.com/\" && git config url.\"https://git:$(cat .token)@github.com/\".insteadOf \"git@github.com:\"",
    "flash-forward": "npx npm-check-updates -u && npm run do-install",
    "reset": "rm -rf * && git checkout . && git pull && npm run do-install",
    "build": "npx build-scripts --dev && sed -i -e '1i#!/usr/bin/env node\\' lib/bin/*.cjs",
    "build:contracts": "node ./lib/bin/build-contracts.cjs compile-contract --dev",
    "build:prod": "npx build-scripts --prod",
    "test": "jest --runInBand --coverage --detectOpenHandles",
    "test:unit": "jest --testPathPattern=\"/tests/unit\" --passWithNoTests --detectOpenHandles",
    "test:integration": "jest --testPathPattern=\"/tests/(integration)\" --passWithNoTests --detectOpenHandles",
    "test:all": "jest --testPathPattern=\"/tests\" --passWithNoTests --detectOpenHandles",
    "test:circular": "dpdm -T --no-warning --no-tree ./src/index.ts",
    "coverage": "rimraf ./workdocs/reports/data/*.json && npm run test:all -- --coverage --config=./workdocs/reports/jest.coverage.config.ts",
    "lint": "eslint .",
    "lint-fix": "eslint --fix .",
    "prepare-pr": "npm run lint-fix && npm run build:prod && npm run coverage && npm run docs",
    "prepare-release": "npm run lint-fix && npm run build:prod && npm run coverage && npm run docs",
    "release": "./bin/tag-release.sh",
    "clean-publish": "npx clean-publish",
    "drawings": "for FILE in workdocs/drawings/*.drawio; do echo \"converting $FILE to image...\" && docker run --rm -v $(pwd):/data rlespinasse/drawio-export --format png $FILE; done && cp -rf workdocs/drawings/export/* workdocs/resources/",
    "uml": "cd workdocs/uml && for FILE in ./*.puml; do docker run --rm -v $(pwd):/work -w /work miy4/plantuml -DPLANTUML_LIMIT_SIZE=8192 -tpng $FILE; done && cd ../.. && cp -fr workdocs/uml/*.png workdocs/resources/",
    "docs": "npx rimraf ./docs && mkdir docs && npx build-scripts --docs",
    "infrastructure:up": "docker compose -f ./docker/infrastructure/docker-compose.yaml up -d",
    "infrastructure:down": "docker compose -f ./docker/infrastructure/docker-compose.yaml down --rmi local -v",
    "publish-docs": "docker run -it --rm --user $(id -u):$(id -g) -v \"$(pwd)/workdocs/confluence:/content\" -e ATLASSIAN_API_TOKEN=$(cat .confluence-token) ghcr.io/markdown-confluence/publish:latest",
    "copy-storage": "sudo cp -R docker/infrastructure/storage docker/docker-data/ && sudo chmod -R 755 docker/docker-data",
    "repo:init": "codex exec \"$(cat ./.codex/prompts/repo-setup.md)\nbase_path is `./`, initialize the repository\" -s workspace-write",
    "repo:setup": "codex exec \"$(cat ./.codex/prompts/repo-setup.md)\nbase_path is ./\" -s workspace-write",
    "repo:doc": "codex exec \"$(cat ./.codex/prompts/doc.md) $(cat ./.codex/prompts/bulk-docs.md)\nbase_path is ./\" -s workspace-write",
    "repo:tests": "codex exec \"$(cat ./.codex/prompts/bulk-tests.md)\nbase_path is ./ and coverage is 95%\" -s workspace-write",
    "repo:readme": "codex exec \"$(cat ./.codex/prompts/update-readme.md)\nbase_path is ./\" -s workspace-write",
    "repo:pr": "npm run repo:doc && npm run repo:tests && npm run repo:readme",
    "sync-codex": "./bin/sync-codex.sh"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/decaf-ts/for-fabric.git"
  },
  "engines": {
    "node": ">=20.0.0",
    "npm": ">=10.0.0"
  },
  "files": [
    "lib",
    "dist"
  ],
  "keywords": [
    "hyperledger",
    "fabric",
    "blockchain",
    "chaincode",
    "ledger",
    "typescrip",
    "decaf",
    "grpc",
    "network",
    "contracts"
  ],
  "author": "Tiago Venceslau and Contributors",
  "license": "MPL-2.0",
  "bugs": {
    "url": "https://github.com/decaf-ts/for-fabric/issues"
  },
  "homepage": "https://github.com/decaf-ts/for-fabric#readme",
  "devDependencies": {
    "@decaf-ts/fabric-weaver": "latest",
    "@decaf-ts/utils": "latest"
  },
  "peerDependencies": {
    "@decaf-ts/core": "latest",
    "@decaf-ts/db-decorators": "latest",
    "@decaf-ts/decoration": "latest",
    "@decaf-ts/decorator-validation": "latest",
    "@decaf-ts/for-couchdb": "latest",
    "@decaf-ts/injectable-decorators": "latest",
    "@decaf-ts/transactional-decorators": "latest",
    "@decaf-ts/logging": "latest",
    "@decaf-ts/reflection": "latest"
  },
  "dependencies": {
    "@grpc/grpc-js": "^1.13.3",
    "@hyperledger/fabric-gateway": "^1.7.1",
    "@peculiar/webcrypto": "^1.5.0",
    "@peculiar/x509": "^1.13.0",
    "fabric-ca-client": "^2.2.20",
    "fabric-common": "^2.2.20",
    "fabric-contract-api": "^2.5.8",
    "fabric-network": "^2.2.20",
    "fabric-shim": "^2.5.8",
    "json-stringify-deterministic": "^1.0.12",
    "jsrsasign": "^11.1.0",
    "jsrsasign-util": "^1.0.5",
    "rollup-plugin-ts": "^3.4.5",
    "sort-keys-recursive": "^2.1.10"
  },
  "overrides": {
    "fabric-common": {
      "jsrsasign": "^11.1.0"
    },
    "fabric-ca-client": {
      "jsrsasign": "^11.1.0"
    }
  }
}